Leyendo  letters
Executing  letters with  Feedforward  arquitecture.

>>> Imports:
#coding=utf-8

try:
    from keras.datasets import mnist
except:
    pass

try:
    from keras.datasets import fashion_mnist
except:
    pass

try:
    from keras.datasets import cifar10
except:
    pass

try:
    from keras.datasets import imdb
except:
    pass

try:
    from keras import backend as K
except:
    pass

try:
    import numpy as np
except:
    pass

try:
    import sys
except:
    pass

try:
    import time
except:
    pass

try:
    import urllib.request
except:
    pass

try:
    import os
except:
    pass

try:
    from sklearn.model_selection import StratifiedKFold
except:
    pass

try:
    from hyperopt import Trials, STATUS_OK, tpe
except:
    pass

try:
    from keras.layers.core import Dense, Dropout, Activation, Flatten
except:
    pass

try:
    from keras.layers.convolutional import Convolution2D, MaxPooling2D
except:
    pass

try:
    from keras.optimizers import SGD, Adam
except:
    pass

try:
    from keras.models import Sequential
except:
    pass

try:
    from keras.utils import np_utils
except:
    pass

try:
    from hyperas import optim
except:
    pass

try:
    from hyperas.distributions import choice, uniform
except:
    pass

>>> Hyperas search space:

def get_space():
    return {
        'Dropout': hp.uniform('Dropout', 0, 0.5),
        'Dense': hp.choice('Dense', [256, 512, 1024]),
        'Activation': hp.choice('Activation', ['relu', 'sigmoid']),
        'Dropout_1': hp.uniform('Dropout_1', 0, 0.5),
        'Dropout_2': hp.choice('Dropout_2', ['three', 'four']),
        'add': hp.choice('add', [Dropout(0.5), Activation('linear')]),
        'optimizer': hp.choice('optimizer', ['rmsprop', 'adam', 'sgd']),
        'batch_size': hp.choice('batch_size', [64, 128]),
    }

>>> Data
  1: 
  2: seed = 7
  3: 
  4: dirname = 'letters.csv'
  5: url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/letter-recognition/letter-recognition.data'
  6: local_filename, headers = urllib.request.urlretrieve(url, dirname)  
  7: 
  8: n_cols= 17
  9: n_rows=20000
 10: 
 11: X = np.genfromtxt(local_filename, delimiter= ',',usecols = range(1,n_cols))
 12: y = np.genfromtxt(local_filename, delimiter= ',',usecols = 0, dtype=None)
 13: 
 14: 
 15: skf = StratifiedKFold(n_splits=2, random_state = seed)
 16: for train_index, test_index in skf.split(X, y):
 17: 	X_train, X_test = X[train_index], X[test_index]
 18: 	y_train, y_test = y[train_index], y[test_index]
 19: 
 20: nb_classes = len(np.unique(y_train))
 21: 
 22: y_train = [ord(char.lower()) - 97 for char in y_train]
 23: y_test = [ord(char.lower()) - 97 for char in y_test]
 24: 
 25: y_train = np_utils.to_categorical(y_train, nb_classes)
 26: y_test = np_utils.to_categorical(y_test, nb_classes)
 27: 
 28: 
 29: 
 30: 
>>> Resulting replaced keras model:

   1: def keras_fmin_fnct(space):
   2: 
   3: 	num_epoch=1*200
   4: 	num_epoch=1*1
   5: 	nb_classes = y_train.shape[1]
   6: 
   7: 	model = Sequential()
   8: 	model.add(Dense(512, input_shape=X_train.shape[1:]))
   9: 	model.add(Activation('relu'))
  10: 	model.add(Dropout(space['Dropout']))
  11: 	model.add(Dense(space['Dense']))
  12: 	model.add(Activation(space['Activation']))
  13: 	model.add(Dropout(space['Dropout_1']))
  14: 
  15: 	# If we choose 'four', add an additional fourth layer
  16: 	if space['Dropout_2'] == 'four':
  17: 		model.add(Dense(100))
  18: 
  19: 		# We can also choose between complete sets of layers
  20: 
  21: 		model.add(space['add'])
  22: 		model.add(Activation('relu'))
  23: 
  24: 	model.add(Dense(nb_classes))
  25: 	model.add(Activation('softmax'))
  26: 
  27: 	model.compile(loss='categorical_crossentropy', metrics=['accuracy'],
  28: 	 					 optimizer=space['optimizer'])
  29: 
  30: 	result = model.fit(X_train, y_train,
  31: 				batch_size=space['batch_size'],
  32: 				epochs=num_epoch,
  33: 				verbose=2,
  34: 				validation_split=0.1)
  35: 	#get the highest validation accuracy of the training epochs
  36: 	validation_acc = np.amax(result.history['val_acc']) 
  37: 	print('Best validation acc of epoch:', validation_acc)
  38: 	return {'loss': -validation_acc, 'status': STATUS_OK, 'model': model}
  39: 
  0%|          | 0/10 [00:00<?, ?it/s, best loss: ?]                                                    Train on 9006 samples, validate on 1001 samples
  0%|          | 0/10 [00:00<?, ?it/s, best loss: ?]                                                    Epoch 1/1
  0%|          | 0/10 [00:00<?, ?it/s, best loss: ?]                                                     - 1s - loss: 3.1707 - acc: 0.1181 - val_loss: 2.5459 - val_acc: 0.4006

  0%|          | 0/10 [00:00<?, ?it/s, best loss: ?]                                                    Best validation acc of epoch:
  0%|          | 0/10 [00:00<?, ?it/s, best loss: ?]                                                    0.40059940091201235
  0%|          | 0/10 [00:00<?, ?it/s, best loss: ?] 10%|█         | 1/10 [00:00<00:08,  1.02it/s, best loss: -0.40059940091201235]                                                                               Train on 9006 samples, validate on 1001 samples
 10%|█         | 1/10 [00:01<00:08,  1.02it/s, best loss: -0.40059940091201235]                                                                               Epoch 1/1
 10%|█         | 1/10 [00:01<00:08,  1.02it/s, best loss: -0.40059940091201235]                                                                                - 1s - loss: 2.1216 - acc: 0.3765 - val_loss: 1.4292 - val_acc: 0.5754

 10%|█         | 1/10 [00:02<00:08,  1.02it/s, best loss: -0.40059940091201235]                                                                               Best validation acc of epoch:
 10%|█         | 1/10 [00:02<00:08,  1.02it/s, best loss: -0.40059940091201235]                                                                               0.5754245746504891
 10%|█         | 1/10 [00:02<00:08,  1.02it/s, best loss: -0.40059940091201235] 20%|██        | 2/10 [00:02<00:09,  1.15s/it, best loss: -0.5754245746504891]                                                                               Train on 9006 samples, validate on 1001 samples
 20%|██        | 2/10 [00:02<00:09,  1.15s/it, best loss: -0.5754245746504891]                                                                              Epoch 1/1
 20%|██        | 2/10 [00:02<00:09,  1.15s/it, best loss: -0.5754245746504891]                                                                               - 1s - loss: 2.3940 - acc: 0.3213 - val_loss: 1.5342 - val_acc: 0.6444

 20%|██        | 2/10 [00:03<00:09,  1.15s/it, best loss: -0.5754245746504891]                                                                              Best validation acc of epoch:
 20%|██        | 2/10 [00:03<00:09,  1.15s/it, best loss: -0.5754245746504891]                                                                              0.6443556439983738
 20%|██        | 2/10 [00:03<00:09,  1.15s/it, best loss: -0.5754245746504891] 30%|███       | 3/10 [00:03<00:07,  1.12s/it, best loss: -0.6443556439983738]                                                                              Train on 9006 samples, validate on 1001 samples
 30%|███       | 3/10 [00:04<00:07,  1.12s/it, best loss: -0.6443556439983738]                                                                              Epoch 1/1
 30%|███       | 3/10 [00:04<00:07,  1.12s/it, best loss: -0.6443556439983738]                                                                               - 1s - loss: 2.7029 - acc: 0.2314 - val_loss: 1.7917 - val_acc: 0.4975

 30%|███       | 3/10 [00:04<00:07,  1.12s/it, best loss: -0.6443556439983738]                                                                              Best validation acc of epoch:
 30%|███       | 3/10 [00:04<00:07,  1.12s/it, best loss: -0.6443556439983738]                                                                              0.49750249794908574
 30%|███       | 3/10 [00:04<00:07,  1.12s/it, best loss: -0.6443556439983738] 40%|████      | 4/10 [00:04<00:06,  1.13s/it, best loss: -0.6443556439983738]                                                                              Train on 9006 samples, validate on 1001 samples
 40%|████      | 4/10 [00:05<00:06,  1.13s/it, best loss: -0.6443556439983738]                                                                              Epoch 1/1
 40%|████      | 4/10 [00:05<00:06,  1.13s/it, best loss: -0.6443556439983738]                                                                               - 1s - loss: 3.1635 - acc: 0.0714 - val_loss: 2.8412 - val_acc: 0.2128

 40%|████      | 4/10 [00:06<00:06,  1.13s/it, best loss: -0.6443556439983738]                                                                              Best validation acc of epoch:
 40%|████      | 4/10 [00:06<00:06,  1.13s/it, best loss: -0.6443556439983738]                                                                              0.21278721321891475
 40%|████      | 4/10 [00:06<00:06,  1.13s/it, best loss: -0.6443556439983738] 50%|█████     | 5/10 [00:06<00:06,  1.23s/it, best loss: -0.6443556439983738]                                                                              Train on 9006 samples, validate on 1001 samples
 50%|█████     | 5/10 [00:06<00:06,  1.23s/it, best loss: -0.6443556439983738]                                                                              Epoch 1/1
 50%|█████     | 5/10 [00:06<00:06,  1.23s/it, best loss: -0.6443556439983738]                                                                               - 1s - loss: 3.4382 - acc: 0.0409 - val_loss: 3.2118 - val_acc: 0.0959

 50%|█████     | 5/10 [00:07<00:06,  1.23s/it, best loss: -0.6443556439983738]                                                                              Best validation acc of epoch:
 50%|█████     | 5/10 [00:07<00:06,  1.23s/it, best loss: -0.6443556439983738]                                                                              0.09590409594224199
 50%|█████     | 5/10 [00:07<00:06,  1.23s/it, best loss: -0.6443556439983738] 60%|██████    | 6/10 [00:07<00:04,  1.12s/it, best loss: -0.6443556439983738]                                                                              Train on 9006 samples, validate on 1001 samples
 60%|██████    | 6/10 [00:07<00:04,  1.12s/it, best loss: -0.6443556439983738]                                                                              Epoch 1/1
 60%|██████    | 6/10 [00:07<00:04,  1.12s/it, best loss: -0.6443556439983738]                                                                               - 1s - loss: 1.9546 - acc: 0.4357 - val_loss: 1.2479 - val_acc: 0.6274

 60%|██████    | 6/10 [00:08<00:04,  1.12s/it, best loss: -0.6443556439983738]                                                                              Best validation acc of epoch:
 60%|██████    | 6/10 [00:08<00:04,  1.12s/it, best loss: -0.6443556439983738]                                                                              0.6273726297544313
 60%|██████    | 6/10 [00:08<00:04,  1.12s/it, best loss: -0.6443556439983738] 70%|███████   | 7/10 [00:08<00:03,  1.11s/it, best loss: -0.6443556439983738]                                                                              Train on 9006 samples, validate on 1001 samples
 70%|███████   | 7/10 [00:08<00:03,  1.11s/it, best loss: -0.6443556439983738]                                                                              Epoch 1/1
 70%|███████   | 7/10 [00:08<00:03,  1.11s/it, best loss: -0.6443556439983738]                                                                               - 1s - loss: 3.2944 - acc: 0.0441 - val_loss: 3.2276 - val_acc: 0.0669

 70%|███████   | 7/10 [00:09<00:03,  1.11s/it, best loss: -0.6443556439983738]                                                                              Best validation acc of epoch:
 70%|███████   | 7/10 [00:09<00:03,  1.11s/it, best loss: -0.6443556439983738]                                                                              0.06693306696656105
 70%|███████   | 7/10 [00:09<00:03,  1.11s/it, best loss: -0.6443556439983738] 80%|████████  | 8/10 [00:09<00:02,  1.21s/it, best loss: -0.6443556439983738]                                                                              Train on 9006 samples, validate on 1001 samples
 80%|████████  | 8/10 [00:09<00:02,  1.21s/it, best loss: -0.6443556439983738]                                                                              Epoch 1/1
 80%|████████  | 8/10 [00:09<00:02,  1.21s/it, best loss: -0.6443556439983738]                                                                               - 1s - loss: 2.3699 - acc: 0.3121 - val_loss: 1.7839 - val_acc: 0.4406

 80%|████████  | 8/10 [00:10<00:02,  1.21s/it, best loss: -0.6443556439983738]                                                                              Best validation acc of epoch:
 80%|████████  | 8/10 [00:10<00:02,  1.21s/it, best loss: -0.6443556439983738]                                                                              0.4405594413632994
 80%|████████  | 8/10 [00:10<00:02,  1.21s/it, best loss: -0.6443556439983738] 90%|█████████ | 9/10 [00:10<00:01,  1.24s/it, best loss: -0.6443556439983738]                                                                              Train on 9006 samples, validate on 1001 samples
 90%|█████████ | 9/10 [00:11<00:01,  1.24s/it, best loss: -0.6443556439983738]                                                                              Epoch 1/1
 90%|█████████ | 9/10 [00:11<00:01,  1.24s/it, best loss: -0.6443556439983738]                                                                               - 2s - loss: 2.1138 - acc: 0.4034 - val_loss: 1.3919 - val_acc: 0.6244

 90%|█████████ | 9/10 [00:13<00:01,  1.24s/it, best loss: -0.6443556439983738]                                                                              Best validation acc of epoch:
 90%|█████████ | 9/10 [00:13<00:01,  1.24s/it, best loss: -0.6443556439983738]                                                                              0.6243756234824479
 90%|█████████ | 9/10 [00:13<00:01,  1.24s/it, best loss: -0.6443556439983738]100%|██████████| 10/10 [00:13<00:00,  1.59s/it, best loss: -0.6443556439983738]
--- 17.766672134399414 seconds ---
Evalutation of best performing model:
(10007, 16)
(9993, 16)

  32/9993 [..............................] - ETA: 0s
2592/9993 [======>.......................] - ETA: 0s
5216/9993 [==============>...............] - ETA: 0s
8064/9993 [=======================>......] - ETA: 0s
9993/9993 [==============================] - 0s 19us/step
[1.5222381295640584, 0.6359451616310231]
Time consumed:  0.006070522069931031  hours
{'Activation': 1, 'Dense': 0, 'Dropout': 0.19749681333133445, 'Dropout_1': 0.48790925917284717, 'Dropout_2': 0, 'add': 0, 'batch_size': 0, 'optimizer': 1}
