Leyendo  imdb
Executing  imdb with  Feedforward  arquitecture.

>>> Imports:
#coding=utf-8

try:
    from keras.datasets import mnist
except:
    pass

try:
    from keras.datasets import fashion_mnist
except:
    pass

try:
    from keras.datasets import cifar10
except:
    pass

try:
    from keras.datasets import imdb
except:
    pass

try:
    from keras import backend as K
except:
    pass

try:
    import numpy as np
except:
    pass

try:
    import sys
except:
    pass

try:
    import time
except:
    pass

try:
    import urllib.request
except:
    pass

try:
    import os
except:
    pass

try:
    from sklearn.model_selection import StratifiedKFold
except:
    pass

try:
    from hyperopt import Trials, STATUS_OK, tpe
except:
    pass

try:
    from keras.layers.core import Dense, Dropout, Activation, Flatten
except:
    pass

try:
    from keras.layers.convolutional import Convolution2D, MaxPooling2D
except:
    pass

try:
    from keras.optimizers import SGD, Adam
except:
    pass

try:
    from keras.models import Sequential
except:
    pass

try:
    from keras.utils import np_utils
except:
    pass

try:
    from hyperas import optim
except:
    pass

try:
    from hyperas.distributions import choice, uniform
except:
    pass

>>> Hyperas search space:

def get_space():
    return {
        'Dropout': hp.uniform('Dropout', 0, 1),
        'Dense': hp.choice('Dense', [256, 512, 1024]),
        'Activation': hp.choice('Activation', ['relu', 'sigmoid']),
        'Dropout_1': hp.uniform('Dropout_1', 0, 1),
        'Dropout_2': hp.choice('Dropout_2', ['three', 'four']),
        'add': hp.choice('add', [Dropout(0.5), Activation('linear')]),
        'optimizer': hp.choice('optimizer', ['rmsprop', 'adam', 'sgd']),
        'batch_size': hp.choice('batch_size', [64, 128]),
    }

>>> Data
  1: 
  2: num_words=10000
  3: skip_top= 20
  4: (x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=num_words,skip_top =skip_top)
  5: 
  6: X_train = np.zeros((len(x_train),num_words))
  7: X_test= np.zeros((len(x_test),num_words))
  8: 
  9: for i in range(1,len(x_train)):
 10: 	X_train[i,np.unique(x_train[i])[1:]] = True
 11: for i in range(1,len(x_train)):
 12: 	X_test[i,np.unique(x_test[i])[1:]] = True
 13: 
 14: nb_classes = len(np.unique(y_train))
 15: y_train = np_utils.to_categorical(y_train, nb_classes)
 16: y_test = np_utils.to_categorical(y_test, nb_classes)		
 17: 
 18: 
 19: 
 20: 
>>> Resulting replaced keras model:

   1: def keras_fmin_fnct(space):
   2: 
   3: 	num_epoch=1*1
   4: 	nb_classes = y_train.shape[1]
   5: 
   6: 	model = Sequential()
   7: 	model.add(Dense(512, input_shape=X_train.shape[1:]))
   8: 	model.add(Activation('relu'))
   9: 	model.add(Dropout(space['Dropout']))
  10: 	model.add(Dense(space['Dense']))
  11: 	model.add(Activation(space['Activation']))
  12: 	model.add(Dropout(space['Dropout_1']))
  13: 
  14: 	# If we choose 'four', add an additional fourth layer
  15: 	if space['Dropout_2'] == 'four':
  16: 		model.add(Dense(100))
  17: 
  18: 		# We can also choose between complete sets of layers
  19: 
  20: 		model.add(space['add'])
  21: 		model.add(Activation('relu'))
  22: 
  23: 	model.add(Dense(nb_classes))
  24: 	model.add(Activation('softmax'))
  25: 
  26: 	model.compile(loss='categorical_crossentropy', metrics=['accuracy'],
  27: 	 					 optimizer=space['optimizer'])
  28: 
  29: 	result = model.fit(X_train, y_train,
  30: 				batch_size=space['batch_size'],
  31: 				epochs=num_epoch,
  32: 				verbose=2,
  33: 				validation_split=0.1)
  34: 	#get the highest validation accuracy of the training epochs
  35: 	validation_acc = np.amax(result.history['val_acc']) 
  36: 	print('Best validation acc of epoch:', validation_acc)
  37: 	return {'loss': -validation_acc, 'status': STATUS_OK, 'model': model}
  38: 
  0%|          | 0/5 [00:00<?, ?it/s, best loss: ?]                                                   Train on 22500 samples, validate on 2500 samples
  0%|          | 0/5 [00:00<?, ?it/s, best loss: ?]                                                   Epoch 1/1
  0%|          | 0/5 [00:00<?, ?it/s, best loss: ?]                                                    - 5s - loss: 0.7019 - acc: 0.5124 - val_loss: 0.6742 - val_acc: 0.6820

  0%|          | 0/5 [00:04<?, ?it/s, best loss: ?]                                                   Best validation acc of epoch:
  0%|          | 0/5 [00:04<?, ?it/s, best loss: ?]                                                   0.6820000004768372
  0%|          | 0/5 [00:04<?, ?it/s, best loss: ?] 20%|██        | 1/5 [00:04<00:19,  4.95s/it, best loss: -0.6820000004768372]                                                                             Train on 22500 samples, validate on 2500 samples
 20%|██        | 1/5 [00:05<00:19,  4.95s/it, best loss: -0.6820000004768372]                                                                             Epoch 1/1
 20%|██        | 1/5 [00:05<00:19,  4.95s/it, best loss: -0.6820000004768372]                                                                              - 6s - loss: 0.8660 - acc: 0.5519 - val_loss: 0.4910 - val_acc: 0.8124

 20%|██        | 1/5 [00:11<00:19,  4.95s/it, best loss: -0.6820000004768372]                                                                             Best validation acc of epoch:
 20%|██        | 1/5 [00:11<00:19,  4.95s/it, best loss: -0.6820000004768372]                                                                             0.8124
 20%|██        | 1/5 [00:11<00:19,  4.95s/it, best loss: -0.6820000004768372] 40%|████      | 2/5 [00:11<00:15,  5.30s/it, best loss: -0.8124]                                                                             Train on 22500 samples, validate on 2500 samples
 40%|████      | 2/5 [00:11<00:15,  5.30s/it, best loss: -0.8124]                                                                 Epoch 1/1
 40%|████      | 2/5 [00:11<00:15,  5.30s/it, best loss: -0.8124]                                                                  - 7s - loss: 0.8310 - acc: 0.6041 - val_loss: 0.3374 - val_acc: 0.8728

 40%|████      | 2/5 [00:18<00:15,  5.30s/it, best loss: -0.8124]                                                                 Best validation acc of epoch:
 40%|████      | 2/5 [00:18<00:15,  5.30s/it, best loss: -0.8124]                                                                 0.8728
 40%|████      | 2/5 [00:18<00:15,  5.30s/it, best loss: -0.8124] 60%|██████    | 3/5 [00:18<00:11,  5.83s/it, best loss: -0.8728]                                                                 Train on 22500 samples, validate on 2500 samples
 60%|██████    | 3/5 [00:18<00:11,  5.83s/it, best loss: -0.8728]                                                                 Epoch 1/1
 60%|██████    | 3/5 [00:18<00:11,  5.83s/it, best loss: -0.8728]                                                                  - 4s - loss: 0.4599 - acc: 0.7777 - val_loss: 0.2714 - val_acc: 0.8908

 60%|██████    | 3/5 [00:23<00:11,  5.83s/it, best loss: -0.8728]                                                                 Best validation acc of epoch:
 60%|██████    | 3/5 [00:23<00:11,  5.83s/it, best loss: -0.8728]                                                                 0.8908000000953674
 60%|██████    | 3/5 [00:23<00:11,  5.83s/it, best loss: -0.8728] 80%|████████  | 4/5 [00:23<00:05,  5.57s/it, best loss: -0.8908000000953674]                                                                             Train on 22500 samples, validate on 2500 samples
 80%|████████  | 4/5 [00:23<00:05,  5.57s/it, best loss: -0.8908000000953674]                                                                             Epoch 1/1
 80%|████████  | 4/5 [00:23<00:05,  5.57s/it, best loss: -0.8908000000953674]                                                                              - 4s - loss: 0.4468 - acc: 0.8100 - val_loss: 0.2809 - val_acc: 0.8900

 80%|████████  | 4/5 [00:27<00:05,  5.57s/it, best loss: -0.8908000000953674]                                                                             Best validation acc of epoch:
 80%|████████  | 4/5 [00:27<00:05,  5.57s/it, best loss: -0.8908000000953674]                                                                             0.8899999997138978
 80%|████████  | 4/5 [00:27<00:05,  5.57s/it, best loss: -0.8908000000953674]100%|██████████| 5/5 [00:27<00:00,  5.25s/it, best loss: -0.8908000000953674]
--- 34.22735357284546 seconds ---
Evalutation of best performing model:
(25000, 10000)
(25000, 10000)

   32/25000 [..............................] - ETA: 4:25:55
   64/25000 [..............................] - ETA: 2:14:08
  448/25000 [..............................] - ETA: 18:55  
  832/25000 [..............................] - ETA: 10:03
 1216/25000 [>.............................] - ETA: 6:47 
 1600/25000 [>.............................] - ETA: 5:05
 2048/25000 [=>............................] - ETA: 3:54
 2560/25000 [==>...........................] - ETA: 3:03
 3072/25000 [==>...........................] - ETA: 2:30
 3616/25000 [===>..........................] - ETA: 2:04
 4224/25000 [====>.........................] - ETA: 1:43
 4832/25000 [====>.........................] - ETA: 1:28
 5440/25000 [=====>........................] - ETA: 1:16
 6048/25000 [======>.......................] - ETA: 1:06
 6656/25000 [======>.......................] - ETA: 58s 
 7264/25000 [=======>......................] - ETA: 52s
 7872/25000 [========>.....................] - ETA: 46s
 8480/25000 [=========>....................] - ETA: 41s
 9088/25000 [=========>....................] - ETA: 37s
 9696/25000 [==========>...................] - ETA: 34s
10304/25000 [===========>..................] - ETA: 30s
10912/25000 [============>.................] - ETA: 28s
11520/25000 [============>.................] - ETA: 25s
12128/25000 [=============>................] - ETA: 23s
12736/25000 [==============>...............] - ETA: 21s
13344/25000 [===============>..............] - ETA: 19s
13952/25000 [===============>..............] - ETA: 17s
14560/25000 [================>.............] - ETA: 15s
15168/25000 [=================>............] - ETA: 14s
15776/25000 [=================>............] - ETA: 12s
16384/25000 [==================>...........] - ETA: 11s
16992/25000 [===================>..........] - ETA: 10s
17600/25000 [====================>.........] - ETA: 9s 
18208/25000 [====================>.........] - ETA: 8s
18816/25000 [=====================>........] - ETA: 7s
19424/25000 [======================>.......] - ETA: 6s
20000/25000 [=======================>......] - ETA: 5s
20608/25000 [=======================>......] - ETA: 4s
21216/25000 [========================>.....] - ETA: 4s
21824/25000 [=========================>....] - ETA: 3s
22432/25000 [=========================>....] - ETA: 2s
23040/25000 [==========================>...] - ETA: 1s
23648/25000 [===========================>..] - ETA: 1s
24256/25000 [============================>.] - ETA: 0s
24864/25000 [============================>.] - ETA: 0s
25000/25000 [==============================] - 23s 938us/step
[0.28788118775844573, 0.87912]
